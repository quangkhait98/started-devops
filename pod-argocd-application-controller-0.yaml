apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2022-02-22T09:02:46Z"
  generateName: argocd-application-controller-
  labels:
    app.kubernetes.io/name: argocd-application-controller
    controller-revision-hash: argocd-application-controller-8f67694b9
    statefulset.kubernetes.io/pod-name: argocd-application-controller-0
  name: argocd-application-controller-0
  namespace: nestjs-kubernetes-namespace
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: StatefulSet
    name: argocd-application-controller
    uid: 1ade2b6f-c011-4aee-8d71-1538e190f630
  resourceVersion: "3248"
  uid: 8dced36f-56cf-4c10-ac79-58fd79ee19cb
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
spec:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: argocd-application-controller
          topologyKey: kubernetes.io/hostname
        weight: 100
      - podAffinityTerm:
          labelSelector:
            matchLabels:
              app.kubernetes.io/part-of: argocd
          topologyKey: kubernetes.io/hostname
        weight: 5
  containers:
  - command:
    - argocd-application-controller
    env:
    - name: ARGOCD_RECONCILIATION_TIMEOUT
      valueFrom:
        configMapKeyRef:
          key: timeout.reconciliation
          name: argocd-cm
          optional: true
    - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER
      valueFrom:
        configMapKeyRef:
          key: repo.server
          name: argocd-cmd-params-cm
          optional: true
    - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
      valueFrom:
        configMapKeyRef:
          key: controller.repo.server.timeout.seconds
          name: argocd-cmd-params-cm
          optional: true
    - name: ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS
      valueFrom:
        configMapKeyRef:
          key: controller.status.processors
          name: argocd-cmd-params-cm
          optional: true
    - name: ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS
      valueFrom:
        configMapKeyRef:
          key: controller.operation.processors
          name: argocd-cmd-params-cm
          optional: true
    - name: ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT
      valueFrom:
        configMapKeyRef:
          key: controller.log.format
          name: argocd-cmd-params-cm
          optional: true
    - name: ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL
      valueFrom:
        configMapKeyRef:
          key: controller.log.level
          name: argocd-cmd-params-cm
          optional: true
    - name: ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION
      valueFrom:
        configMapKeyRef:
          key: controller.metrics.cache.expiration
          name: argocd-cmd-params-cm
          optional: true
    - name: ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS
      valueFrom:
        configMapKeyRef:
          key: controller.self.heal.timeout.seconds
          name: argocd-cmd-params-cm
          optional: true
    - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT
      valueFrom:
        configMapKeyRef:
          key: controller.repo.server.plaintext
          name: argocd-cmd-params-cm
          optional: true
    - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS
      valueFrom:
        configMapKeyRef:
          key: controller.repo.server.strict.tls
          name: argocd-cmd-params-cm
          optional: true
    - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
      valueFrom:
        configMapKeyRef:
          key: controller.app.state.cache.expiration
          name: argocd-cmd-params-cm
          optional: true
    - name: REDIS_SERVER
      valueFrom:
        configMapKeyRef:
          key: redis.server
          name: argocd-cmd-params-cm
          optional: true
    - name: REDISDB
      valueFrom:
        configMapKeyRef:
          key: redis.db
          name: argocd-cmd-params-cm
          optional: true
    - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
      valueFrom:
        configMapKeyRef:
          key: controller.default.cache.expiration
          name: argocd-cmd-params-cm
          optional: true
    image: quay.io/argoproj/argocd:v2.2.5
    imagePullPolicy: Always
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 8082
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    name: argocd-application-controller
    ports:
    - containerPort: 8082
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 8082
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /app/config/controller/tls
      name: argocd-repo-server-tls
    - mountPath: /home/argocd
      name: argocd-home
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-bct7x
      readOnly: true
    workingDir: /home/argocd
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostname: argocd-application-controller-0
  nodeName: minikube
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: argocd-application-controller
  serviceAccountName: argocd-application-controller
  subdomain: argocd-application-controller
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - emptyDir: {}
    name: argocd-home
  - name: argocd-repo-server-tls
    secret:
      defaultMode: 420
      items:
      - key: tls.crt
        path: tls.crt
      - key: tls.key
        path: tls.key
      - key: ca.crt
        path: ca.crt
      optional: true
      secretName: argocd-repo-server-tls
  - name: kube-api-access-bct7x
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2022-02-22T09:02:46Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2022-02-22T09:05:06Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2022-02-22T09:05:06Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2022-02-22T09:02:46Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://6dfee8414cbdc1e809345fb7a18bf4a1c649cd2a8f0c80b871704555b0669303
    image: quay.io/argoproj/argocd:v2.2.5
    imageID: docker-pullable://quay.io/argoproj/argocd@sha256:bac1aeee8e78e64d81a633b9f64148274abfa003165544354e2ebf1335b6ee73
    lastState: {}
    name: argocd-application-controller
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2022-02-22T09:04:56Z"
  hostIP: 192.168.49.2
  phase: Running
  podIP: 172.17.0.12
  podIPs:
  - ip: 172.17.0.12
  qosClass: BestEffort
  startTime: "2022-02-22T09:02:46Z"
